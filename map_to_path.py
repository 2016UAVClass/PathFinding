
import json
import visgraph

##def createVertexFromPoint(pt):
##    return path.Vertex(pt[0], pt[1])

#reads in the map described in the file (as generated by the map generation script)
#creates a path from it
def createPathFromFile(filename):
    mapobj=None
    with open(filename, "r") as infile:
        dec=json.JSONDecoder()
        mapobj=dec.decode(infile.read())
    if mapobj:
        return createPathFromMap(mapobj)
    else:
        return None

#creates a path from the given map object (the parsed contents of the map generation script)
def createPathFromMap(mapobj):
    obstacles=[]
    waypoints=[] 
    start_point=(90, 30) #TODO: fix this
    vehicle_size=5 #TODO
    for name, vals in mapobj.items():
        if vals["type"] == "waypoint": #TODO import map gen constants [Future Team]
            center=vals["center"]
            rad=vals["radius"]
            #each element in the waypoints list is a tuple, first element is the waypoint tuple
            #second is the index of the waypoint
            waypoints.append(((center[0], center[1], rad), vals["index"]))
        elif vals["type"]=="zone":
            if not vals["flight_legal"]:
                #is no fly zone, add as such
                #no longer need to turn into polygon here
                #obstacles.append(Polygon([createVertexFromPoint(p) for p in vals["bounds"]]))

                obstacles.append(vals["bounds"])
            else:
                #TODO
                #this is the "fly zone" for the map, so the area "outside" of it needs to be turned
                #into a no fly zone
                pass

    #sort the waypoints list by index      
    waypoints.sort(key=lambda w: w[1])
    #add the start point to the path                            
    path_list=[start_point]
    graph = visgraph.VisibilityGraph(obstacles, vehicle_size)
    #ignore the waypoint index now, its not used
    for wp, _ in waypoints:
##        print(path_list)
##        print(waypoints)
        sp=path_list[-1] #our starting point is the most recent position we were in
        path_list+=graph.find_path(sp, wp)
        
    return path_list #currently will double include middle points, because find_path adds the start point
