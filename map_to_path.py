import path
import JSON

def createVertexFromPoint(pt):
    return path.Vertex(pt[0], pt[1])

#reads in the map described in the file (as generated by the map generation script)
#creates a path from it
def createPathFromFile(filename):
    mapobj=None
    with open(filename, "r") as infile:
        dec=json.JSONDecoder()
        mapobj=dec.decode(infile.read())
    if mapobj:
        return createPathFromMap(mapobj)
    else:
        return None

#creates a path from the given map object (the parsed contents of the map generation script)
def createPathFromMap(mapobj):
    obstacles=[]
    waypoints=[]
    for name, vals in mapobj.iteritems():
        if vals["type"] == "waypoint": #TODO import map gen constants [Future Team]
            center=vals["center"]
            rad=vals["radius"]
            waypoints.append(path.Circle(createVertexFromPoint(center), rad))
        elif vals["type"]=="zone":
            if not vals["flight_legal"]:
                #is no fly zone, add as such
                obstacles.append(Polygon([createVertexFromPoint(p) for p in vals["bounds"]]))
            else:
                #TODO
                #this is the "fly zone" for the map, so the area "outside" of it needs to be turned
                #into a no fly zone
                                
    #TODO: add in waypoints list
    og=OccupancyGrid(obstacles)
    return og.find_path() #TODO: finish this [Future team]
